# Main entrypoint of the workflow. 
# Please follow the best practices: 
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there. 
import os 
configfile: "./config/config.yaml"

def get_all_out(wildcards):
    result_out = []
    wildcards = []
    result_out = './results/all/'
    with open('./test/test_accessions.txt','r') as fh:
        for i in fh:
            wildcards.append(i.rstrip())
            check_point = f"{i.rstrip()}/{i.rstrip()}_done"
            os.path.join(result_out,check_point)
    return result_out, wildcards

scattergather:
    split=workflow.cores

out_files, accessions = lambda wildcards : get_all_out(wildcards)

# rule all
rule all:
  input: 
      out_files
	     

# rule efetch
rule efetch:
  input:
	    "../.test/example_data/test_accession.txt"
  output:
	    "./results/downloaded_data.fna"
  conda: 
	    "./envs/download.yaml"
  shell: 
      "python3 ./scripts/efetch_fasta.py < {input} > {output}"

# rename_fasta_records
rule rename_fasta_records:
  # Renames the record names in the multi-fasta to avoid problems 
  # with whitespaces or too long names in certain tools.
  # Creates a backup of the original record names: .bak file.
  input:
  	"./results/downloaded_data.fna"
  output:
  	"./results/accessions_renamed.fna"
  shell:
  	"sed 's/\.[0-9].*//g' {input} > {output}"

# rule split_multifasta
rule split_multifasta:
  input: "./results/downloaded_data.fna"
  output: expand("./results/split_output/{{accession}}.fna", accessions)
  conda:
        "envs/seqkit.yaml"
  params:
        number_of_parts=workflow.cores,
        dirname=lambda wc, output: os.path.dirname(output[0]),
  shell:
        

# rule pharokka:

rule pharokka:
  input: 
    "../results/split_output/{accession}.fasta"
  output: 
      dirname("../results/all/{accession}")
  params:
    check_point="../results/all/{accession}/{accession}_done"
  threads: config["threads"]
  log: "workflow/logs/pharokka/{accession}.log"
  conda: "env/pharokka.yaml"
  shell:
	  "pharokka -i {input} -l {{wildcards.accession}##*_} -o {output} -p {wildcards.split_fastas} -t {threads} &> {log} | touch {params.checkpoint}"



